import React, { useEffect, useState, useContext } from "react";
import { Navigate, useParams } from "react-router-dom";

import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'


const EditArticle =()=>{
    const slug = useParams().slug
    const [currentUserState] = useContext(CurrentUserContext)
    const apiUrl = `/articles/${slug}`
    const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiUrl)
    const [
        {response: updateArticleResponse, error: updateArticleError},
        doUpdateArticle
    ] = useFetch(apiUrl)
    const [initialValues, setInitialValues] = useState(null)
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)

    const handleSubmit = article =>{
        console.log('handlesubmit', article)
        doUpdateArticle({
            method: 'put',
            data:{
                article
            }
        })
    }

    useEffect(() => {
        doFetchArticle()
    }, [doFetchArticle])

    useEffect(()=>{
        if(!fetchArticleResponse){
            return
        }
        setInitialValues({
            title: fetchArticleResponse.article.title,
            description: fetchArticleResponse.article.description,
            body: fetchArticleResponse.article.body,
            tagList: fetchArticleResponse.article.tagList
        })
    }, [fetchArticleResponse])

    useEffect(() => {
        if (!updateArticleResponse){
            return
        }
        setIsSuccessfullSubmit(true)
    },[updateArticleResponse])

    if (currentUserState.isLoggedIn === false){
        return <Navigate to='/' />
    }

    if (isSuccessfullSubmit){
        return <Navigate to={`/articles/${slug}`} />
    }

    return (
        <ArticleForm 
            onSubmit={handleSubmit}
            errors={(updateArticleError && updateArticleError.errors) || {}}
            initialValues={initialValues}
        />
    )
}

export default EditArticle